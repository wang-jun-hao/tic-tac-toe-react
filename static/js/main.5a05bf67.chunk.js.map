{"version":3,"sources":["components/Cell.js","components/Board.js","components/FacebookShare.js","components/TwitterShare.js","components/Social.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","value","onClick","Board","i","this","cells","renderCell","Component","FacebookShare","FacebookShareButton","url","quote","winner","FacebookIcon","round","size","TwitterShare","TwitterShareButton","title","TwitterIcon","Social","Main","state","blueTurn","Array","fill","isGameOver","randomMode","keyboardListener","bind","event","key","handleClick","restart","toggleRandom","document","addEventListener","removeEventListener","setState","Math","floor","random","slice","alert","generateRandomEmptyIndex","forEach","getIsGameOver","lines","length","a","b","c","getWinner","status","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a05bf67.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Cell(props) {\n    return (\n        <button className={\"cell \" + props.value} onClick={props.onClick}/>\n    );\n}\n","import React, { Component } from 'react';\nimport Cell from './Cell';\n\nexport default class Board extends Component {\n    renderCell(i){\n        return (\n            <Cell value={this.props.cells[i]} onClick={()=>this.props.onClick(i)}/>\n        );\n    }\n    render() {\n        return (\n            <div>\n                <div>\n                    {this.renderCell(0)}\n                    {this.renderCell(1)}\n                    {this.renderCell(2)}\n                </div>\n                <div>\n                    {this.renderCell(3)}\n                    {this.renderCell(4)}\n                    {this.renderCell(5)}\n                </div>\n                <div>\n                    {this.renderCell(6)}\n                    {this.renderCell(7)}\n                    {this.renderCell(8)}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {FacebookShareButton, FacebookIcon} from \"react-share\";\n\nexport default function FacebookShare(props) {\n  return (\n      <FacebookShareButton\n          className=\"share-btn\"\n          url={\"https://wang-jun-hao.github.io/tic-tac-toe-react/\"}\n          quote={\"I won a tic-tac-toe game playing as \" + props.winner + \"!\"}>\n        <FacebookIcon round size={36} />\n      </FacebookShareButton>\n  );\n}\n","import React from \"react\";\nimport {TwitterShareButton, TwitterIcon} from \"react-share\";\n\nexport default function TwitterShare(props) {\n  return (\n      <TwitterShareButton\n          className=\"share-btn\"\n          url={\"https://wang-jun-hao.github.io/tic-tac-toe-react/\"}\n          title={\"I won a tic-tac-toe game playing as \" + props.winner + \"!\"}>\n        <TwitterIcon round size={36} />\n      </TwitterShareButton>\n  );\n}\n","import React from \"react\";\nimport FacebookShare from './FacebookShare';\nimport TwitterShare from './TwitterShare';\n\nexport default function Social(props) {\n  return (\n      <div>\n        <div className=\"social-prompt\">\n          Share your win, {props.winner}!\n        </div>\n        <div>\n          <FacebookShare winner={props.winner} />\n          <TwitterShare winner={props.winner} />\n        </div>\n      </div>\n  );\n}\n","import React, { Component } from 'react'\nimport Board from './Board';\nimport Social from './Social';\n\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blueTurn: true,\n            cells: Array(9).fill(null),\n            winner: null,\n            isGameOver: false,\n            randomMode: false,\n        }\n        this.keyboardListener = this.keyboardListener.bind(this);\n    }\n\n    keyboardListener(event) {\n        switch(event.key) {\n            case \"q\":\n                this.handleClick(0);\n                break;\n            case \"w\":\n                this.handleClick(1);\n                break;\n            case \"e\":\n                this.handleClick(2);\n                break;\n            case \"a\":\n                this.handleClick(3);\n                break;\n            case \"s\":\n                this.handleClick(4);\n                break;\n            case \"d\":\n                this.handleClick(5);\n                break;\n            case \"z\":\n                this.handleClick(6);\n                break;\n            case \"x\":\n                this.handleClick(7);\n                break;\n            case \"c\":\n                this.handleClick(8);\n                break;\n            case \"r\":\n                this.restart();\n                break;\n            case \"t\":\n                this.toggleRandom();\n                break;\n            default:\n                break;\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", this.keyboardListener, false);\n    }\n\n    componentWillUnmount(){\n        document.removeEventListener(\"keydown\", this.keyboardListener, false);\n    }\n\n    restart() {\n        this.setState({\n            blueTurn: true,\n            cells : Array(9).fill(null),\n            winner: null,\n            isGameOver: false,\n        })\n    }\n\n    toggleRandom() {\n        this.setState({\n            randomMode: !this.state.randomMode,\n        })\n    }\n\n    generateRandomEmptyIndex(cells) {\n        let i;\n        // generate random i between 0 to 8 until an empty index is obtained\n        do {\n            i = Math.floor(Math.random() * 9);\n        } while (cells[i]);\n\n        return i;\n    }\n\n    handleClick(i) {\n        const cells = this.state.cells.slice();\n\n        if (this.state.isGameOver) {\n            alert(\"Game has ended. Click on Start over to play again!\");\n            return;\n        }\n\n        if (this.state.randomMode) {\n            i = this.generateRandomEmptyIndex(cells);\n        }\n\n        if (cells[i]) {\n            alert(\"Cell is already filled. Please select an empty cell.\");\n            return;\n        }\n\n        cells[i] = this.state.blueTurn ? 'Blue' : 'Yellow';\n\n        let isGameOver = getIsGameOver(cells);\n        const winner = getWinner(cells);\n        if (winner) {\n            isGameOver = true;\n        }\n\n        this.setState({\n            cells: cells,\n            blueTurn: !this.state.blueTurn,\n            winner: winner,\n            isGameOver: isGameOver,\n        });\n    }\n\n    render() {\n        const winner = this.state.winner;\n        const isGameOver = this.state.isGameOver;\n        const randomMode = this.state.randomMode;\n\n        let status;\n        if (isGameOver) {\n            status = winner ? winner + \" won!\" : \"Tie\";\n        } else {\n            status = (this.state.blueTurn ? 'Blue' : 'Yellow') + \"'s Turn\";\n        }\n        if (randomMode) {\n            status += \" (Random)\";\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board onClick={(i) => this.handleClick(i)}\n                        cells={this.state.cells} />\n                </div>\n                <div className=\"sidebar\">\n                    <div className=\"status\">{status}</div>\n                    <button className=\"sidebar-btn\" onClick={() => { this.restart() }}>\n                        {'Start over'}\n                    </button>\n                    <button className=\"sidebar-btn\" onClick={() => { this.toggleRandom() }}>\n                        {randomMode ? \"Turn random mode off\" : \"Turn random mode on\"}\n                    </button>\n                    <div className=\"social\">\n                        {winner && <Social winner={winner}/>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getWinner(cells) {\n    // lines represents all possible winning combinations\n    const lines = [\n        // horizontal\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        // vertical\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        // diagonals\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (cells[a] && cells[a] === cells[b] && cells[b] === cells[c]) {\n            // a win combination, return name of winner\n            return cells[a];\n        }\n    }\n\n    return null;\n}\n\nfunction getIsGameOver(cells) {\n    // check if all cells are filled\n    let isGameOver = true;\n\n    cells.forEach((cells) => {\n        if (cells == null) {\n            isGameOver = false;\n        }\n    })\n\n    return isGameOver;\n}\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n   <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}